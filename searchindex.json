[{
  "section": "Blog",
  "slug": "/blog/aws-cdk-localstack/",
  "title": "How to Set Up a Serverless Home Lab with AWS CDK, Lambda, and LocalStack",
  "description": "Learn how to set up a local serverless environment using AWS CDK, LocalStack, and a simple Python Lambda function. Ideal for developers looking to test AWS services locally.",
  "date": "September 26, 2024",
  "image": null,
  "imageSM": null,
  "searchKeyword": "",
  "categories": "Cloud, devops",
  "tags": "AWS, LocalStack, AWS Lambda, Docker, AWS CDK - Serverless",
  "content":"Are you looking to develop and test serverless applications locally without incurring AWS costs? In this tutorial, we\u0026rsquo;ll guide you through setting up a local serverless environment using AWS CDK, LocalStack, and a simple Python Lambda function. We\u0026rsquo;ll leverage the PythonFunction construct from the aws-cdk.aws-lambda-python-alpha module to streamline the process.\nWhat is LocalStack? LocalStack is a fully functional local AWS cloud stack that allows you to develop and test your cloud applications offline. It emulates a vast majority of AWS services, enabling you to test your applications without connecting to the real AWS cloud. This is incredibly useful for development and testing purposes, as it reduces costs and increases development speed.\nPrerequisites Before we begin, ensure you have the following installed on your machine:\nPython 3.7+ Node.js npm AWS CLI AWS CDK Docker Setting Up LocalStack Install LocalStack using pip and then start it:\npip install localstack localstack start -d This will spin up LocalStack in the background, emulating AWS services locally.\nInstalling awslocal and cdklocal To interact with LocalStack using AWS CLI commands and AWS CDK, we\u0026rsquo;ll install awslocal and cdklocal. awslocal is a thin wrapper that runs AWS CLI commands against LocalStack.\npip install awscli-local npm install -g aws-cdk-local Creating a Lambda Function Let\u0026rsquo;s create a simple Lambda function that echoes back a message. We\u0026rsquo;ll also set up an API Gateway to invoke this Lambda function.\nCreate a new directory for your project and navigate into it:\nmkdir mystack cd mystack Initialize a New AWS CDK Project Initialize a new AWS CDK project in Python:\ncdklocal init app --language python This command sets up a basic CDK project structure with the necessary files.\nCreate the Lambda Function Directory Create a directory for your Lambda function:\nmkdir lambda Write the Lambda Function Inside the lambda directory, create a file named echo.py with the following content:\ndef handler(event, context): message = event.get(\u0026#39;message\u0026#39;, \u0026#39;Hello from Lambda!\u0026#39;) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: message } This simple function returns the message provided in the event, or a default message if none is provided.\nDefining the Infrastructure with AWS CDK Now, let\u0026rsquo;s define our infrastructure using AWS CDK.\nUpdate the CDK Stack First, add the aws-cdk.aws-lambda-python-alpha module to your project\u0026rsquo;s requirements.txt file:\naws-cdk.aws-lambda-python-alpha Install the required Python packages:\npip install -r requirements.txt Creating the CDK Stack Open mystack.py and replace its content with the following code:\nfrom aws_cdk import ( Stack, aws_lambda as _lambda, aws_lambda_python_alpha as lambda_python, aws_apigateway as apigateway, ) from constructs import Construct class LocalstackCdkDemoStack(Stack): def __init__(self, scope: Construct, id: str, **kwargs) -\u0026gt; None: super().__init__(scope, id, **kwargs) echo_lambda = lambda_python.PythonFunction( self, \u0026#39;EchoFunction\u0026#39;, entry=\u0026#39;lambda\u0026#39;, index=\u0026#39;echo.py\u0026#39;, handler=\u0026#39;handler\u0026#39;, runtime=_lambda.Runtime.PYTHON_3_8, ) # Define the API Gateway REST API api = apigateway.LambdaRestApi( self, \u0026#39;EchoApi\u0026#39;, handler=echo_lambda, proxy=True ) Before deploying, bootstrap your CDK environment in LocalStack:\ncdklocal bootstrap Deploying to LocalStack Using CDK Now, let\u0026rsquo;s deploy our stack to LocalStack.\nInstall CDK Dependencies pip install -r requirements.txt Synthesize the CloudFormation Template cdklocal synth This command synthesizes your CDK app into a CloudFormation template, which is then used for deployment.\nDeploy the Stack cdklocal deploy The CDK will summarize the changes to your stack and you can press y to confirm the changes.\nOnce deployed, you\u0026rsquo;ll receive an endpoint URL for your API Gateway. You can test the Lambda function by sending a request to this URL.\nAfter deployment, note the API endpoint URL from the output. It should look something like:\nhttps://\u0026lt;api-id\u0026gt;.execute-api.localhost.localstack.cloud:4566/prod/ Test the API Use curl to send a POST request to the API endpoint:\ncurl -X POST \u0026#39;http://localhost:4566/restapis/\u0026lt;api-id\u0026gt;/prod/_user_request_\u0026#39; -d \u0026#39;{\u0026#34;message\u0026#34;: \u0026#34;Hello, LocalStack!\u0026#34;}\u0026#39; Replace \u0026lt;api-id\u0026gt; with the actual API ID from your deployment output.\nExpected Response You should receive a response similar to:\n{ \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: \u0026#34;Hello, LocalStack!\u0026#34; } Thoughts You\u0026rsquo;ve successfully set up a local serverless environment using AWS CDK and LocalStack. Using LocalStack and AWS CDK together, you can run most AWS services through LocalStack so that you can build and test your entire system locally. We\u0026rsquo;ve set up a simple lambda and an api gateway, but this project could be extended to include local versions of services like DynamoDB, Cognito and SQS with only a bit more code.\n"}]
